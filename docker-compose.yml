# Docker Compose configuration for SONA AI Assistant
services:
  # SONA Backend Service
  sona-backend:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: sona-backend
    ports:
      - "8000:8000"
    environment:
      - BACKEND_HOST=0.0.0.0
      - BACKEND_PORT=8000
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
      - ./temp:/app/temp
    command: python backend/app.py
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - sona-network
    
  # SONA Frontend Service  
  sona-frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sona-frontend
    ports:
      - "8501:8501"
    environment:
      - STREAMLIT_PORT=8501
      - BACKEND_HOST=sona-backend
      - BACKEND_PORT=8000
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
    command: >
      sh -c "
        echo 'Waiting for backend to be ready...' &&
        sleep 10 &&
        streamlit run ui/streamlit_app.py 
        --server.port=8501 
        --server.address=0.0.0.0 
        --server.headless=true 
        --browser.serverAddress=localhost 
        --browser.gatherUsageStats=false
      "
    depends_on:
      sona-backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - sona-network

  # Optional: Redis for caching (uncomment if needed)
  # redis:
  #   image: redis:7-alpine
  #   container_name: sona-redis
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   command: redis-server --appendonly yes
  #   restart: unless-stopped
  #   networks:
  #     - sona-network

  # Optional: PostgreSQL for session storage (uncomment if needed)
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: sona-postgres
  #   environment:
  #     POSTGRES_DB: sona
  #     POSTGRES_USER: sona
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sona_password}
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   restart: unless-stopped
  #   networks:
  #     - sona-network

  # Optional: Nginx reverse proxy (uncomment for production)
  # nginx:
  #   image: nginx:alpine
  #   container_name: sona-nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./ssl:/etc/ssl/certs:ro
  #   depends_on:
  #     - sona-backend
  #     - sona-frontend
  #   restart: unless-stopped
  #   networks:
  #     - sona-network

# Networks
networks:
  sona-network:
    driver: bridge
    name: sona-network

# Volumes (uncomment if using optional services)
# volumes:
#   redis_data:
#     driver: local
#   postgres_data:
#     driver: local